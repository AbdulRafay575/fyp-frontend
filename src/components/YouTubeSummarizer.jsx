import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { Youtube, FilePlus, FileText, Loader2 } from 'lucide-react';

const YouTubeSummarizer = ({ onSummarize }) => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isValid, setIsValid] = useState(true);
  const { toast } = useToast();

  const validateYoutubeUrl = (url) => {
    // Simple validation - just checking if it contains youtube.com or youtu.be
    return url.includes('youtube.com/watch') || url.includes('youtu.be/');
  };

  const handleUrlChange = (e) => {
    const value = e.target.value;
    setUrl(value);
    setIsValid(value === '' || validateYoutubeUrl(value));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!url) {
      toast({
        title: "URL is required",
        description: "Please enter a YouTube video URL",
        variant: "destructive"
      });
      return;
    }
    
    if (!validateYoutubeUrl(url)) {
      setIsValid(false);
      toast({
        title: "Invalid URL",
        description: "Please enter a valid YouTube video URL",
        variant: "destructive"
      });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Simulate API call to process YouTube video
      // In real app, you would call your backend API here
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Extract video ID for demonstration
      let videoId = '';
      if (url.includes('youtube.com/watch')) {
        videoId = new URL(url).searchParams.get('v');
      } else if (url.includes('youtu.be/')) {
        videoId = url.split('youtu.be/')[1].split('?')[0];
      }
      
      // Mock response data
      const mockSummary = {
        videoId,
        title: "Sample YouTube Video",
        duration: "10:30",
        summary: "This is a placeholder summary of the YouTube video content. In a real application, this would be generated by AI based on the actual video content.",
        keyPoints: [
          "First key point extracted from the video",
          "Second important concept explained in the video",
          "Third significant idea from the content",
          "Final main takeaway from the video"
        ]
      };
      
      if (onSummarize) {
        onSummarize(mockSummary);
      }
      
      toast({
        title: "Video processed successfully",
        description: "The YouTube video has been summarized.",
      });
      
      setUrl('');
    } catch (error) {
      console.error("Error processing YouTube video:", error);
      toast({
        title: "Processing failed",
        description: "There was a problem processing the YouTube video. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full">
      <div className="bg-card rounded-lg border border-border p-6">
        <div className="flex items-center mb-4">
          <Youtube className="h-6 w-6 text-red-600 mr-2" />
          <h3 className="text-lg font-medium text-foreground">YouTube Video Summarizer</h3>
        </div>
        
        <p className="text-muted-foreground mb-4">
          Enter a YouTube video URL to generate a summary and extract key points.
        </p>
        
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <Input
                type="text"
                placeholder="https://www.youtube.com/watch?v=..."
                value={url}
                onChange={handleUrlChange}
                className={!isValid ? "border-red-500" : ""}
              />
              {!isValid && (
                <p className="text-red-500 text-sm mt-1">
                  Please enter a valid YouTube URL
                </p>
              )}
            </div>
            
            <div className="flex space-x-2">
              <Button 
                type="submit" 
                className="flex-1"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <FilePlus className="mr-2 h-4 w-4" />
                    Generate Summary
                  </>
                )}
              </Button>
              
              <Button 
                type="button" 
                variant="outline"
                disabled={isLoading}
                onClick={() => {
                  // For demo - would open video player with dubbing options
                  if (!url || !validateYoutubeUrl(url)) {
                    toast({
                      title: "Invalid URL",
                      description: "Please enter a valid YouTube video URL",
                      variant: "destructive"
                    });
                    return;
                  }
                  
                  toast({
                    title: "Video Dubbing",
                    description: "This feature will be connected to the backend",
                  });
                }}
              >
                <FileText className="mr-2 h-4 w-4" />
                Dub Video
              </Button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default YouTubeSummarizer;
