
import React, { useState } from 'react';
import Navbar from '@/components/Navbar';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Youtube, FileText, FilePlus, Loader2 } from 'lucide-react';

const Videos = () => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isValid, setIsValid] = useState(true);
  const [videoId, setVideoId] = useState(null);
  const [summary, setSummary] = useState(null);
  const { toast } = useToast();

  const validateYoutubeUrl = (url) => {
    return url.includes('youtube.com/watch') || url.includes('youtu.be/');
  };

  const handleUrlChange = (e) => {
    const value = e.target.value;
    setUrl(value);
    setIsValid(value === '' || validateYoutubeUrl(value));
  };

  const extractVideoId = (url) => {
    let id = '';
    if (url.includes('youtube.com/watch')) {
      id = new URL(url).searchParams.get('v');
    } else if (url.includes('youtu.be/')) {
      id = url.split('youtu.be/')[1].split('?')[0];
    }
    return id;
  };

  const handleLoadVideo = () => {
    if (!url) {
      toast({
        title: "URL is required",
        description: "Please enter a YouTube video URL",
        variant: "destructive"
      });
      return;
    }
    
    if (!validateYoutubeUrl(url)) {
      setIsValid(false);
      toast({
        title: "Invalid URL",
        description: "Please enter a valid YouTube video URL",
        variant: "destructive"
      });
      return;
    }

    const id = extractVideoId(url);
    setVideoId(id);
    setSummary(null); // Reset summary when loading a new video
  };

  const handleSummarize = async () => {
    if (!videoId) return;
    
    setIsLoading(true);
    
    try {
      // Simulate API call to process YouTube video
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock response data
      const mockSummary = {
        title: "Sample YouTube Video",
        duration: "10:30",
        summary: "This is a placeholder summary of the YouTube video content. In a real application, this would be generated by AI based on the actual video content.",
        keyPoints: [
          "First key point extracted from the video",
          "Second important concept explained in the video", 
          "Third significant idea from the content",
          "Final main takeaway from the video"
        ]
      };
      
      setSummary(mockSummary);
      
      toast({
        title: "Video processed successfully",
        description: "The YouTube video has been summarized.",
      });
    } catch (error) {
      console.error("Error processing YouTube video:", error);
      toast({
        title: "Processing failed",
        description: "There was a problem processing the YouTube video. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDubVideo = () => {
    toast({
      title: "Video Dubbing",
      description: "This feature will be connected to the backend",
    });
  };

  return (
    <div className="min-h-screen bg-background transition-colors duration-300">
      <Navbar />
      <div className="app-container py-8">
        <h1 className="text-3xl font-bold mb-2 gradient-text">YouTube Videos</h1>
        <p className="text-muted-foreground mb-8">Watch, summarize, and dub educational videos</p>
        
        <div className="grid lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card className="mb-6">
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center">
                  <Youtube className="h-5 w-5 mr-2 text-red-600" />
                  YouTube Video Player
                </CardTitle>
                <CardDescription>
                  Enter a YouTube URL to watch and process the video
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-2">
                    <Input
                      type="text"
                      placeholder="https://www.youtube.com/watch?v=..."
                      value={url}
                      onChange={handleUrlChange}
                      className={!isValid ? "border-red-500" : ""}
                    />
                    <Button onClick={handleLoadVideo}>Load</Button>
                  </div>
                  
                  {!isValid && (
                    <p className="text-red-500 text-sm">
                      Please enter a valid YouTube URL
                    </p>
                  )}
                  
                  {videoId ? (
                    <div className="aspect-video rounded-lg overflow-hidden">
                      <iframe
                        src={`https://www.youtube.com/embed/${videoId}`}
                        title="YouTube video player"
                        className="w-full h-full"
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                      ></iframe>
                    </div>
                  ) : (
                    <div className="aspect-video rounded-lg bg-muted flex items-center justify-center">
                      <div className="text-center">
                        <Youtube className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
                        <p className="text-muted-foreground">Enter a YouTube URL to load a video</p>
                      </div>
                    </div>
                  )}
                  
                  {videoId && (
                    <div className="flex gap-2">
                      <Button 
                        onClick={handleSummarize} 
                        disabled={isLoading}
                        className="flex-1"
                      >
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Processing...
                          </>
                        ) : (
                          <>
                            <FilePlus className="mr-2 h-4 w-4" />
                            Generate Summary
                          </>
                        )}
                      </Button>
                      <Button 
                        variant="outline"
                        onClick={handleDubVideo}
                        disabled={isLoading}
                      >
                        <FileText className="mr-2 h-4 w-4" />
                        Dub Video
                      </Button>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
          
          <div>
            <Card>
              <CardHeader>
                <CardTitle>Video Summary</CardTitle>
                <CardDescription>
                  AI-generated summary and key points
                </CardDescription>
              </CardHeader>
              <CardContent>
                {summary ? (
                  <div className="space-y-4">
                    <p className="text-sm">{summary.summary}</p>
                    
                    <div>
                      <h4 className="font-semibold mb-2 text-sm">Key Points:</h4>
                      <ul className="text-sm space-y-1">
                        {summary.keyPoints.map((point, index) => (
                          <li key={index} className="flex">
                            <span className="text-primary mr-2">â€¢</span>
                            <span>{point}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-6">
                    <p className="text-muted-foreground">
                      {videoId 
                        ? "Click 'Generate Summary' to analyze this video" 
                        : "Load a video to generate a summary"}
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Videos;
